h1. git remote-branch

Usage: git remote-branch (create|destroy) [<branch>]

Creates or destroys remote branches and their associated local tracking
branches. This code is based on git-remote-branch by Carl Mercier
(carl@carlmercier.com).

Creating Branches

With no arguments (git remote-branch create), adds a new remote branch with the
commits in the current branch (presumably a local-only branch), and configures
this branch to track the remote branch.

With a <branch> specified, creates a remote branch, creates a local tracking
branch, and switches to that branch.

Deleting Branches

With no arguments (git remote-branch delete), removes the current branch both
locally and remotely.

With a <branch> specified, removes the given branch from the remote repository
then deletes the local tracking branch.

h1. git pull-migrate

*Usage:* @git pull-migrate [<branch>]@

*Note:* This command is intended for projects with sequential migrations, _not_
timestamped migrations.

With no arguments, pulls in changes from the remote tracking branch. If there
are migration number conflicts, this tool

# migrates your database down past the lowest conflicting number (with the
  option to backup your database),
# renumbers your migrations to be above any new remote migrations,
# commits this change,
# pulls in the remote migrations,
# and applies all migrations with the new numbering.

You will need to push the commit. This is useful if you have staged migrations
that haven't been committed, and another developer commits migrations with the
same numbers as yours.

If you supply a <branch>, it will be used instead of the remote tracking branch.
This is useful if you are working on a "feature branch" and you frequently merge
the downstream changes of the parent branch (which would be the <branch>) into
your branch. Should the parent branch have any migrations that yours does not,
your migrations will be renumbered and room will be made for the parent
migrations.

h1. git checkout-migrate

*Usage:* @git checkout-migrate <branch>@

*Note:* This command is intended for projects with sequential migrations, _not_
timestamped migrations.

This task checks out a branch, and migrates the database appropriately for that
branch. In order, it performs the following tasks:

# Migrates your database down to the highest common migration between the two
  branches,
# checks out the new branch, and
# migrates the database back up to the highest migration.
